#!/usr/bin/env python
# coding: utf-8

from astropy.io import fits
import argparse
import re
import os
import numpy as np
import yaml
from pathlib import Path
from densitysplit.pipeline import get_seeds, get_density_pdf, get_quantiles
from densitysplit.cosmology import Cosmology
from densitysplit.utilities import sky_to_cartesian, cartesian_to_sky


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-p', '--parameter_file', help='YAML parameter file', required=True)
    parser.add_argument('-t', '--data_fn', type=str)
    parser.add_argument('-r', '--randoms_fn', type=str)
    parser.add_argument('-n', '--nquantiles', type=int)
    parser.add_argument('-d', '--density_fn', type=str)
    parser.add_argument('-Q', '--quantiles_fn', type=str)
    parser.add_argument('-s', '--nseeds', type=int)
    parser.add_argument('-S', '--seeds_fn', type=str)
    parser.add_argument('-T', '--nthreads', type=int)

    args = parser.parse_args()

    # load parameter from YAML file
    with open(args.parameter_file) as file:
        params = yaml.full_load(file)

    # command-line arguments take precedence over configuration file
    if args.data_fn is not None:
        params['input']['data_fn'] = args.data_fn

    if args.randoms_fn is not None:
        params['input']['randoms_fn'] = args.randoms_fn

    if args.seeds_fn is not None:
        params['output']['seeds_fn'] = args.seeds_fn

    if args.density_fn is not None:
        params['output']['density_fn'] = args.density_fn

    if args.quantiles_fn is not None:
        params['output']['quantiles_fn'] = args.quantiles_fn

    if args.nthreads is not None:
        params['algorithm']['nthreads'] = args.nthreads

    if args.nquantiles is not None:
        params['algorithm']['nquantiles'] = args.nquantiles

    if args.nseeds is not None:
        params['algorithm']['nseeds'] = args.nseeds

    def decode_eval_str(s):
        # Change ${col} => col, and return list of columns
        if s is None:
            return '', []
        toret = str(s)
        columns = []
        for replace in re.finditer('(\${.*?})', s):
            value = replace.group(1)
            col = value[2:-1]
            toret = toret.replace(value, col)
            if col not in columns:
                columns.append(col)
        return toret, columns

    def remove_duplicates(cols):
        # Remove duplicate column names
        toret = []
        for col in cols:
            if col not in toret:
                toret.append(col)
        return toret

    def make_list(cols):
        # Turn single column name to list of column names
        if cols is None:
            return []
        if isinstance(cols, str):
            cols = [cols]
        return cols

    allowed_formats = ['rdz', 'xyz']
    positions = {}
    weights = {}
    columns = []
    input_format = {}
    input_fns, output_fns = {}, {}

    # print(params['algorithm'])

    # Whether nbar is provided by randoms catalog,
    # or nbar is assumed uniform
    allowed_selection_functions = ['uniform', 'randoms', '']
    selection_function = params['algorithm'].pop(
            'selection_function', '').lower()
    if selection_function not in allowed_selection_functions:
        raise Exception('Unknown input selection function '
            f'{selection_function}. Choices are {allowed_selection_functions}')
    # First check what we have in input/output
    input_fns, output_fns = {}, {}
    for name in ['data', 'randoms']:
        tmp_fn = params['input'].get('{}_fn'.format(name), None)
        if tmp_fn is None:
            if name == 'randoms':
                if selection_function == 'randoms':
                    raise Exception('Please provide randoms catalog.')
                # No randoms provided and no instruction on selection function, defaults to uniform nbar
                if not selection_function:
                    # logger.info('No randoms provided.')
                    selection_function = 'uniform'
            else:
                raise Exception('Please provide data catalog.')
        else:  # We've got a file name!
            input_fns[name] = tmp_fn
        tmp_fn = params['output'].get('{}_fn'.format(name), None)
        if tmp_fn is not None:
            # Check that requested catalog can be supplied given input
            if name not in input_fns:
                raise Exception('Cannot output {} catalog if not provided as input.'.format(name))
            output_fns[name] = tmp_fn
    # Randoms catalog provided and no instruction on selection function, defaults to nbar from randoms
    if not selection_function:
        selection_function = 'randoms'
    # logger.info('Using {} selection function.'.format(selection_function))

    # for name in ['data', 'randoms']:
    #     input_fns[name] = params['input'].get('{}_fn'.format(name), None)

    for name in input_fns:
        input_format[name] = None
        for format in allowed_formats:
            cols = params['input'].get('{}_{}'.format(format,name),None)
            if cols is not None:
                if input_format[name] is not None:
                    raise Exception('Cannot use two different input formats 1')
                input_format[name] = format
                position_columns = cols 

        if input_format[name] is None:
            for format in allowed_formats:
                cols = params['input'].get(format,None)
                if cols is not None:
                    # Check whether e.g. 'rdz' but 'xyz' has been specified previously
                    if input_format[name] is not None:
                        raise Exception('Cannot use two different input formats 2')
                    input_format[name] = format
                    position_columns = cols
        format = input_format[name]
        # No format 'xyz', 'xyz_data', 'rdz_randoms', ... found
        if format is None:
            raise Exception('Unknown input format. Choices are {}'.format(allowed_formats))
        position_columns = make_list(position_columns)

        mask_str = params['input'].get(
            'mask_{}'.format(name), params['input'].get('mask', None))
        mask_str, mask_columns = decode_eval_str(mask_str)
        weight_str = params['input'].get(
             'weights_{}'.format(name), params['input'].get('weights', None))
        weight_str, weight_columns = decode_eval_str(weight_str)

        for cols in [position_columns, mask_columns, weight_columns]:
            columns += cols

        columns = remove_duplicates(columns)

        fn = os.path.join(params['input'].get('dir',''), input_fns[name])
        if fn.endswith('fits'):
            with fits.open(input_fns[name]) as hdul:
                tmp = hdul[1].data
    
        catalog = {}
        for col in columns:
            catalog[col] = tmp[col]

        if mask_str:
            mask = eval(mask_str, catalog)
            for col in columns:
                catalog[col] = catalog[col][mask]

        # prepare Cartesian positions from input columns
        if format == 'rdz':
            if not len(position_columns) == 3:  # RA, DEC, Z
                raise Exception('Format rdz requires 3 position columns')
            omega_m = params['cosmology']['omega_m']
            cosmo = Cosmology(omega_m=omega_m)
            pos = np.c_[catalog[position_columns[0]],
                catalog[position_columns[1]], catalog[position_columns[2]]]
            positions[name] = sky_to_cartesian(pos, cosmo)

        else:  # format == 'xyz'
            if len(position_columns) == 3:  # X, Y, Z
                positions[name] = np.array(
                    [catalog[col] for col in position_columns]
                ).T
            elif len(position_columns) == 1:  # single array of shape (N, 3)
                positions[name] = catalog[position_columns[0]]
            else:
                raise Exception('Format xyz requires 1 or 3 position columns')

        # calculate weights
        default_weights = np.ones(len(positions[name]))
        weights.setdefault(name, default_weights)
        if weight_str:
            weights[name] = eval(weight_str, catalog)

    if selection_function == 'uniform':
        sampling_data = None
        box_size = params['algorithm']['box_size']
        randoms_positions2 = None
        randoms_weights2 = None
    else:
        sampling_data = positions['randoms']
        box_size = None
        randoms_positions2 = positions['randoms']
        randoms_weights2 = weights['randoms']

    # generate initial random points
    if params['algorithm']['auto_nseeds']:
        nseeds = 5 * len(positions['data'])
    else:
        nseeds = params['algorithm']['nseeds']
    seeds = get_seeds(
        nseeds=nseeds,
        selection_function=selection_function,
        sampling_data=sampling_data,
        box_size=box_size
    )

    # generate density pdf of random points
    density_pdf = get_density_pdf(
        selection_function=selection_function,
        smooth_radius=params['algorithm']['smooth_radius'],
        smooth_type=params['algorithm']['smooth_type'],
        data_positions1=seeds,
        data_weights1=np.ones(len(seeds)),
        data_positions2=positions['data'],
        data_weights2=weights['data'],
        randoms_positions2=randoms_positions2,
        randoms_weights2=randoms_weights2,
        box_size=box_size,
        nthreads=params['algorithm']['nthreads']
    )

    # split densities in quantiles
    nquantiles = params['algorithm']['nquantiles']
    quantiles = get_quantiles(
        seeds=seeds,
        density_pdf=density_pdf,
        nquantiles=nquantiles
    )

    # convert quantiles back to sky coordinates if necessary
    if input_format['data'] == 'rdz':
        omega_m = params['cosmology']['omega_m']
        cosmo = Cosmology(omega_m)
        for i in range(1, nquantiles + 1):
            quantiles[f'DS{i}'] = cartesian_to_sky(quantiles[f'DS{i}'], cosmo)

    # write output files
    output_dir = params['output']['dir']

    if params['output']['save_density']:
        output_fn = Path(output_dir, params['output']['density_fn'])
        np.save(output_fn, density_pdf)

    output_fn = Path(output_dir, params['output']['quantiles_fn'])
    np.save(output_fn, quantiles)


if __name__ == '__main__':
    main()
